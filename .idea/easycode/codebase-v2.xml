<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/.electron-vue/build.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/.electron-vue/dev-client.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/.electron-vue/dev-runner.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/.electron-vue/webpack.main.config.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/.electron-vue/webpack.renderer.config.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/.electron-vue/webpack.web.config.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/app_assets/AE_CODES.json;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/lib/utils.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/main/index.dev.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/main/index.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/main/lic_server.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/main/server_competition.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/main/socket_setup.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/plugins/vuetify.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/assets/data packages.json;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/router/index.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/competitionLogMessageClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/CompetitorClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/EventClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/JudgeClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/JuryClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/MarkClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/OpenerClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/ProtocolDataFieldClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/RaceClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/Classes/TeamClass.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/aerials.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/index.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/key.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/localization.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/main.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/message_system.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/protocol_settings.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/scoring_services.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/modules/timing.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/store/index.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/src/renderer/main.js;C:/Users/InSyn/Documents/GitHub/tw_scoring/package.json;C:/Users/InSyn/Documents/GitHub/tw_scoring/README.md" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/InSyn/Documents/GitHub/tw_scoring&quot;:&quot;{\&quot;/src/plugins/vuetify.js\&quot;:\&quot;This file configures Vuetify for use in a Vue project.\\n\\nKey functions:\\n\\n- Imports Vue and Vuetify \\n- Imports the Vuetify CSS \\n- Imports colors from Vuetify\\n- Registers Vuetify plugin with Vue\\n- Defines Vuetify configuration options\\n  - Sets icon font to mdiSvg\\n  - Defines light and dark theme options with color variables\\n- Exports a new Vuetify instance with the configuration options\\n\\nIn summary:\\n\\n- Sets up Vuetify \\n- Configures themes/colors\\n- Registers Vuetify plugin\\n- Exports Vuetify instance for use in app\\n\\nThis allows Vuetify and its features/components to be used in the Vue app, with customized themes and color options defined in the configuration.\&quot;,\&quot;/app_assets/AE_CODES.json\&quot;:\&quot;This JSON file contains apparel size codes and their associated price values for women and men.\\n\\nSome key things it does:\\n\\n- Stores apparel size codes (like \\\&quot;S\\\&quot;, \\\&quot;M\\\&quot;, \\\&quot;L\\\&quot; etc.) and more complex codes that combine letters/numbers.\\n\\n- Associates each size code with a price value for women and a price value for men, stored as strings with a comma separator (e.g. \\\&quot;1,650\\\&quot;). \\n\\n- Allows looking up the price for a given size code and gender.\\n\\n- Centrally defines all size codes and prices in one place, so they can be referenced from other parts of the app.\\n\\n- Is in JSON format so it can be easily parsed by code to retrieve the size code/price mappings.\\n\\nKey functions:\\n\\n- Size code and price definition - Stores all valid size codes and associated prices.\\n\\n- Price lookup - Allows retrieving the correct price value given a size code and gender. \\n\\n- Centralized data storage - Keeps size/price mappings in one location that can be accessed from different parts of the app.\\n\\n- JSON format - Makes the data easily parseable and interoperable with other systems.\\n\\nSo in summary, it defines all apparel size codes and prices in a centralized, structured format that can be easily accessed programmatically.\&quot;,\&quot;/src/renderer/store/modules/protocol_settings.js\&quot;:\&quot;This file defines the protocol_settings module in the Vuex store. It handles the state and mutations related to protocol settings for competitions.\\n\\nKey functions:\\n\\n- initStartProtocolFields - Initializes the fields for the start protocol based on the competition configuration\\n- initResultProtocolFields - Initializes the fields for the result protocol based on the competition type (aerials or classic)\\n- initRaceResultProtocolFields - Initializes the fields for the race result protocol \\n- setImage - Mutates the state to set an image for a protocol asset\\n- setExportMode - Mutates the state to set the selected export mode\\n\\nThe main purposes of this module are:\\n\\n1. Define the state for protocol settings like export mode, protocol layout, fields etc.\\n\\n2. Provide getter methods to access the protocol settings state\\n\\n3. Handle mutations to update the protocol settings state, like initializing fields, setting images, changing export mode etc. \\n\\n4. Centralize the logic for generating and updating protocol templates based on the competition configuration.\\n\\nSo in summary, it manages the Vuex state for protocol settings and templates across the app.\&quot;,\&quot;/.electron-vue/dev-runner.js\&quot;:\&quot;This file is responsible for running the development process for an Electron-Vue application.\\n\\nKey functions:\\n\\n- init() - Initializes the dev process by calling greeting(), startRenderer(), startMain(), and startElectron().\\n\\n- greeting() - Prints a greeting message using cfonts.\\n\\n- startRenderer() - Starts the renderer process webpack dev server. Configures hot reloading.\\n\\n- startMain() - Starts the main process webpack watch mode. Configures recompiling on changes. \\n\\n- startElectron() - Launches the Electron app in development mode, attaching debuggers and passing CLI args.\\n\\n- electronLog() - Logs Electron main process output to the console.\\n\\n- logStats() - Logs webpack compiler stats to the console.\\n\\n- startElectron() - Spawns the Electron process and sets up event handlers.\\n\\nIt uses Webpack for both the main and renderer processes, with hot reloading for the renderer. On changes, it will recompile and trigger a reload. It also handles restarting Electron if needed on code changes.\&quot;,\&quot;/src/renderer/store/modules/message_system.js\&quot;:\&quot;This file defines a Vuex module for managing a competition log message system.\\n\\nKey points:\\n\\n- It is a namespaced module called \\\&quot;message_system\\\&quot;\\n- The state contains a competitionLog array to store log messages\\n- A getter returns the competitionLog array\\n- A mutation called addCompetitionLogMessage pushes a new CompetitionLogMessageClass object to the array\\n- The CompetitionLogMessageClass constructor takes the message properties \\n- An action dispatches the addCompetitionLogMessage mutation\\n\\nKey functions:\\n\\n- addCompetitionLogMessage mutation - Adds a new message object to the log array\\n- competitionLog getter - Returns the log array\\n- addCompetitionLogMessage action - Commits the add mutation\\n\\nSo in summary, it provides a Vuex store module to manage adding and retrieving competition log messages using a class to represent each message object.\&quot;,\&quot;/src/renderer/store/index.js\&quot;:\&quot;This file is setting up the Vuex store for a Vue application.\\n\\nKey things it is doing:\\n\\n- Importing Vuex to use the Vuex store functionality\\n- Importing various modules that will contain the store state, getters, mutations, actions etc for different parts of the app\\n- Registering Vuex with Vue \\n- Creating a new Vuex store instance\\n- Setting up empty state, getters, mutations and actions objects initially\\n- Adding the imported modules to the modules option, which registers them within the store\\n- Setting strict mode to false\\n\\nSo in summary:\\n\\n- It initializes Vuex for the app\\n- Imports and registers various modules that will contain store logic\\n- Creates the main store instance\\n- Registers the modules within the store\\n- Sets up the basic store configuration\\n\\nThis allows different parts of the app state and logic to be separated out and managed within their own modules, while being accessible via the central store.\&quot;,\&quot;/package.json\&quot;:\&quot;This is a package.json file for an Electron application built with Vue.js.\\n\\nKey functions:\\n\\n- Defines metadata about the project like name, version, author etc.\\n- Lists dependencies and devDependencies needed for the app.\\n- Defines scripts for common tasks like build, dev, pack etc. These will be run with npm scripts.\\n- Configures Electron Builder for building the app into different platforms/formats like Windows, Mac, Linux etc. Defines icons, categories etc.  \\n- Configures the output, files to include, extra files to copy during build.\\n- Defines the main entry point file for the app.\\n- Allows installing dependencies and development tools with npm install.\\n\\nIn summary, it provides all the configuration needed for:\\n\\n- Managing dependencies\\n- Building the app code \\n- Packaging/building the app into installers for different platforms using Electron Builder\\n- Running dev/build scripts\\n\\nSo it serves as the main configuration file for the project that allows developing, building and packaging the app using Node.js tools and workflows.\&quot;,\&quot;/src/renderer/store/modules/index.js\&quot;:\&quot;This file is used to consolidate all Vuex module files into a single object that can be imported by the main store file.\\n\\nKey functions:\\n\\n- Uses require.context to recursively search the current directory for all .js files\\n- Filters out the index.js file itself \\n- Loops through the matched files\\n- Extracts the module name by removing .js and . from the key \\n- Imports the default export of each file\\n- Adds it to the modules object with the module name as the key\\n\\nThis allows the main store file to simply import modules from this file and register them all in one go, rather than having to import each module individually.\\n\\nIt centralizes the module registration and makes it easier to manage all Vuex modules in one place. Any new modules just need to be added as files in the same directory structure.\&quot;,\&quot;/.electron-vue/build.js\&quot;:\&quot;This file is responsible for building the Electron application for production.\\n\\nKey functions:\\n\\n- clean - Cleans the build directory by deleting build files.\\n\\n- build - The main build function. It cleans dist files, builds the main and renderer processes, and runs electron-builder.\\n\\n- pack - Builds a single webpack configuration (main or renderer). Handles errors.\\n\\n- web - Builds the web/static assets only using webpack. \\n\\n- greeting - Prints a \\\&quot;lets-build\\\&quot; greeting using cfonts, depending on terminal width.\\n\\nThe build process:\\n\\n1. Cleans build files \\n2. Builds main and renderer processes using webpack in parallel\\n3. Prints build output\\n4. Runs electron-builder to package the app\\n5. Exits successfully\\n\\nIt uses things like webpack, del, child_process, and Multispinner to orchestrate the parallel build steps and handle errors. The main purpose is to bundle and package the app into a distributable format for the target platform(s) using electron-builder.\&quot;,\&quot;/src/renderer/main.js\&quot;:\&quot;This file is the main entry point for the Vue renderer process in an Electron application.\\n\\nKey functions:\\n\\n- Imports Vue, vuetify, axios, App component, router and store\\n- Configures Vue to use vue-electron plugin if not in web mode\\n- Sets axios as the HTTP client \\n- Disables production tip\\n- Configures router guard to check for license data before other routes\\n- Initializes a new Vue instance with the App component, router and store\\n- Mounts the Vue app to the #app element\\n\\nIn summary:\\n\\n- Sets up the Vue instance for the renderer \\n- Imports and connects necessary plugins, components, router and store\\n- Configures router guard for license checking\\n- Mounts the root Vue app component\\n\\nSo it initializes and configures the core Vue app and ties everything together for the renderer process.\&quot;,\&quot;/.electron-vue/dev-client.js\&quot;:\&quot;This file is used in Electron-Vue projects to enable hot reloading of the renderer process during development.\\n\\nKey functions:\\n\\n- Imports the webpack-hot-middleware client which enables hot reloading of the renderer process when files change.\\n\\n- Subscribes to events from the hot middleware client. \\n\\n- On a \\\&quot;compiling\\\&quot; event, it inserts a div to notify the user that the main process is being recompiled. This lets them know the electron app may reload.\\n\\n- On a \\\&quot;reload\\\&quot; event (disabled currently due to a bug), it would reload the browser window. \\n\\n- Provides a polyfill for Object.fromEntries which is needed by the hot middleware client.\\n\\nSo in summary, it connects the renderer process to the hot reloading provided by webpack-hot-middleware. This allows live reloading of the renderer code during development without fully reloading the electron app on each change. It also notifies when the main process is being recompiled.\&quot;,\&quot;/src/lib/utils.js\&quot;:\&quot;This utils.js file contains some utility functions for common tasks:\\n\\n- generateId() - Generates a random 8 character alphanumeric ID string to use as a unique identifier. It uses crypto.getRandomValues to generate random numbers and converts them to strings in base 36.\\n\\n- getAECodes() - Fetches AE code data from a local JSON file and caches it in localStorage. It returns the parsed JSON data. This is likely being used to load static lookup data on app startup. \\n\\n- cutMarks() - Takes an array, removes the highest and lowest values based on the provided counts. This is used to trim outliers from an array of numbers, like in statistical analysis. \\n\\nThe key exported functions are:\\n\\n- generateId() - Generates a random ID \\n- getAECodes() - Loads and caches AE code data\\n- cutMarks() - Trims highest/lowest values from an array\\n\\nSo in summary, this file contains some reusable utility functions for common tasks like ID generation, loading static data, and array trimming. The functions are exported so they can be imported and used elsewhere in the application codebase.\&quot;,\&quot;/src/renderer/assets/data packages.json\&quot;:\&quot;This file defines the data packages/messages that will be sent between the different components of a scoring system:\\n\\n- Soft (main app) -\\u003e Terminal (Judge):\\n  - Sets a competitor on the judge\\u0027s terminal \\n  - Notifies when scores are approved by head judge\\n- Terminal (Judge) -\\u003e Soft: \\n  - Sends a new score when judge enters it\\n  - Requests time sync\\n- Soft -\\u003e Terminal (Head Judge):\\n  - Initializes head judge screen with list of races\\n  - Gets competitor results for a race  \\n- Terminal (Head Judge) -\\u003e Soft:\\n  - Approves scores entered by judges\\n  - Requests list of races\\n  - Requests results for a specific race\\n\\nKey functions:\\n\\n- Synchronizing time between components\\n- Setting up competitor/race data on judge terminals  \\n- Judges entering scores and head judge approving them\\n- Head judge viewing results and approving final scores\\n\\nThis defines the messaging that allows the different parts (app, judge terminals, head judge terminal) to communicate and synchronize scoring data during a competition.\&quot;,\&quot;/src/main/index.js\&quot;:\&quot;This is the main entry point file for the Electron application.\\n\\nKey things it does:\\n\\n- Imports necessary modules like electron, fs, systeminformation etc.\\n\\n- Sets up the static asset path for production builds\\n\\n- Defines the main window creation function createWindow()\\n\\n- Handles app events like ready, window-all-closed etc and calls createWindow()\\n\\n- Loads the main window and sets basic options like size, url etc\\n\\n- Handles IPC communication - listens for \\\&quot;getSysData\\\&quot; and sends system info to renderer \\n\\n- Tries to read license file and sends result to renderer\\n\\n- Imports other files for license server and socket setup\\n\\nKey functions:\\n\\n- createWindow() - Creates the main BrowserWindow instance\\n- app.on(\\\&quot;ready\\\&quot;) - Calls createWindow() when app is ready\\n- app.on(\\\&quot;getSysData\\\&quot;) - Handles request for system info and sends response  \\n- Reads license file and sends result\\n- app.on(\\\&quot;window-all-closed\\\&quot;)/app.on(\\\&quot;activate\\\&quot;) - Quit/create window logic\\n\\nSo in summary, it sets up the main window, handles app lifecycle events and IPC communication between main and renderer processes.\&quot;,\&quot;/src/main/server_competition.js\&quot;:\&quot;This file defines a JavaScript object called competition that contains all the data and configuration for a competition server.\\n\\nKey functions/properties:\\n\\n- mainData - Contains basic configuration data for the competition like title, discipline, date, location etc.\\n\\n- result_formula - Defines how overall results are calculated from individual scores/marks. Allows configuring different calculation types and options. \\n\\n- secretary - Stores information about the competition secretary. \\n\\n- stuff - Defines jury members, judges and their details. \\n\\n- competitorsSheet - Stores the header and list of competitors. \\n\\n- changed_marks - Tracks any marks that were changed.\\n\\n- races - Will store individual race/heat results \\n\\n- selected_race_id - Stores ID of currently selected race \\n\\n- ae_codes - Not sure what this tracks\\n\\nSo in summary, it defines all the data models needed to configure, track and calculate results for a competitive event using this server software. The different sections cover things like configuration, participants, scoring and results calculation.\&quot;,\&quot;/.electron-vue/webpack.web.config.js\&quot;:\&quot;This file exports the webpack configuration for building the web/renderer process of an Electron app.\\n\\nKey functions:\\n\\n- Defines entry points, output path, and other basic webpack config\\n- Sets up loaders for different file types like CSS, images, fonts, Vue components\\n- Configures Babel for JS compilation\\n- Adds plugins:\\n  - VueLoaderPlugin for Vue support\\n  - MiniCssExtractPlugin to extract CSS into separate files\\n  - HtmlWebpackPlugin to generate index.html\\n  - DefinePlugin to set environment variables\\n  - HMR plugin for dev server\\n- Adjusts config for production:\\n  - Removes source maps \\n  - Minifies JS/CSS\\n  - Copies static assets\\n  - Sets production environment variable\\n- Conditionally enables minification and other optimizations in production\\n\\nSo in summary, it sets up a standard build pipeline for an Electron app\\u0027s web resources with Vue and CSS/asset handling, and enables optimizations for production.\&quot;,\&quot;/src/renderer/store/Classes/TeamClass.js\&quot;:\&quot;This file defines a TeamClass in JavaScript.\\n\\nKey things:\\n\\n- It defines a class called TeamClass\\n- When instantiated, it takes in a params object with name and competitors properties\\n- It generates a unique id for each team instance using the generateId utility function\\n- It sets the team name to the name passed in params, or an empty string if none provided  \\n- It sets the team competitors to the competitors passed in params, or an empty array if none provided\\n- It sets the qualified property to false by default\\n\\nKey functions:\\n\\n- The constructor() which initializes the class properties based on the params passed in\\n- No other methods are defined on the class, it simply defines the structure/properties of a team object\\n\\nSo in summary, this file defines a TeamClass that can be used to represent a team in the application. When instantiated it sets up the basic team properties and structure. No other functionality is defined on the class.\&quot;,\&quot;/src/renderer/store/modules/localization.js\&quot;:\&quot;This file defines the localization module for the Vuex store.\\n\\nKey functions:\\n\\n- Defines the module\\u0027s state, which includes:\\n  - The current language (lang)\\n  - List of supported languages (lang_list)\\n  - Object containing all localized strings (localization)\\n\\n- Getters to retrieve the current language, language list, and localized strings from the state\\n\\n- Mutation to change the current language \\n\\n- Action to dispatch the language change mutation\\n\\nThe purpose of this module is to centralize all localized text and provide a way to dynamically change the app language. The localization object contains all strings for each supported language. Components can retrieve localized text via the getters, and dispatch the action to change languages globally.\\n\\nThis allows the app to support multiple languages without needing to hardcode strings in each component. It centralizes the localization logic and data in the store for easy access throughout the app.\&quot;,\&quot;/src/main/index.dev.js\&quot;:\&quot;This file is used specifically for the development environment of an Electron app.\\n\\nThe key things it does:\\n\\n1. Installs electron-debug which adds debugging tools like Devtron to the app. This allows inspecting and debugging the renderer and main processes.\\n\\n2. Installs the Vue.js devtools extension. This provides tools for debugging and inspecting Vue apps within the renderer process. \\n\\n3. Has an eslint disable comment to ignore any eslint errors, since this file is only used for development and not production.\\n\\n4. Requires the main index.js file after setting up the dev tools, to start the actual app initialization.\\n\\nSo in summary, it sets up debugging and development tools that are helpful during development but shouldn\\u0027t be included in a production build, like the Vue devtools and electron-debug with Devtron. This allows better debugging and inspection of both the main and renderer processes while developing the Electron app.\&quot;,\&quot;/src/renderer/store/modules/timing.js\&quot;:\&quot;This Vuex module defines the store logic for timing data in a ski racing application.\\n\\nKey points:\\n\\n- It is namespaced as \\\&quot;timing\\\&quot; to isolate its state.\\n\\n- The state defines:\\n  - An array of intermediate timing points (start, int1, int2, finish)\\n  - An empty array to store recorded times\\n  - A TimeClass to define the structure of time objects\\n\\n- Getters expose parts of the state:\\n  - intermediates array\\n  - times array \\n  - TimeClass\\n  - getResults returns an array of objects with bib, created, and time for finish times\\n\\n- No mutations or actions are defined, just the state and getters\\n\\nKey functions:\\n\\n- Getters expose parts of the state for components to read\\n- TimeClass defines the structure for time objects \\n- getResults filters and formats times for display of results\\n\\nSo in summary, it defines the timing data structure and provides getters to access and format that data for use in other parts of the app.\&quot;,\&quot;/src/renderer/store/Classes/EventClass.js\&quot;:\&quot;This file defines a class called EventClass that represents a ski/snowboard competition event.\\n\\nKey functions:\\n\\n- constructor() - Initializes a new EventClass instance with default values\\n\\n- competitorsSheet - Defines the structure of the competitors sheet including header fields\\n\\n- mainData - Stores general event data like title, dates, location etc. \\n\\n- stages - Stores information about qualification/final stages\\n\\n- structure - Defines data structures like types of sports, disciplines, accuracy settings\\n\\n- publishResult() - Publishes a competitor\\u0027s result for a given race \\n\\n- getResult() - Gets the overall result for a competitor \\n\\n- getRaceResult() - Gets the result for a competitor in a specific race\\n\\n- calculateOverallResult() - Calculates and updates a competitor\\u0027s overall result\\n\\n- getSortedByRank() - Sorts competitors by rank based on overall results\\n\\n- set_accuracy() - Formats numeric values based on accuracy settings\\n\\nSo in summary, it defines the data model and key functions for managing competitor data, results, calculations and output for a ski/snowboard competition event. The class encapsulates all the necessary data and logic.\&quot;,\&quot;/src/renderer/store/Classes/JudgeClass.js\&quot;:\&quot;This file defines a JudgeClass in JavaScript. Here\\u0027s what it does:\\n\\n- Defines a JudgeClass constructor that takes in title, id, lastName, name, location properties. It sets default values if not provided.\\n\\n- Sets some default properties like _id (generated unique id), title, remoteId, id, name, lastName, location. \\n\\n- Additional properties like category, socket_id, connected are also defined with default values.\\n\\nKey functions:\\n\\n- constructor() - Initializes a new JudgeClass instance\\n- generateId() - Used to generate a unique id for each instance \\n- Properties like title, id, name, etc. to store judge details\\n- category, socket_id, connected to track judge status/connection\\n\\nIn summary, it defines a JudgeClass model/object that can be used to represent judge data with relevant properties. The constructor initializes a new judge instance with given/default values.\&quot;,\&quot;/.electron-vue/webpack.renderer.config.js\&quot;:\&quot;This file exports the webpack configuration for the renderer process in an Electron app.\\n\\nKey functions:\\n\\n- Defines the entry point as the main.js file in src/renderer\\n- Sets up loaders and rules for different file types like JS, CSS, images, fonts etc.\\n- Configures Vue-loader and plugins like VueLoaderPlugin, MiniCssExtractPlugin, HtmlWebpackPlugin\\n- Defines the output path and filename\\n- Sets up aliases and extensions for resolving modules\\n- Conditionally adds plugins and rules based on environment:\\n  - Defines __static in dev \\n  - Minifies, copies static files and sets NODE_ENV in production\\n- Targets the configuration for the electron-renderer process\\n\\nIn summary, it configures webpack for bundling the renderer code, setting up loaders, plugins and optimization based on the environment for building the renderer bundle to be consumed by the Electron renderer process.\&quot;,\&quot;/src/main/socket_setup.js\&quot;:\&quot;This file sets up the socket.io server for real-time communication between the client and server.\\n\\nKey functions:\\n\\n- Requires socket.io and express and initializes the http server\\n- Sets up a connection listener that emits events and handles socket events\\n- Emits the competition data on connection \\n- Handles socket events like setting marks, updating competition data, connecting/disconnecting judges\\n- Starts/stops the socket server when the app emits events\\n- Sends messages to the main window about server status\\n\\nIn summary:\\n\\n- Initializes the socket.io server\\n- Sets up event handlers for socket events from clients \\n- Syncs competition data across all connected clients\\n- Allows clients to update competition data in real-time\\n- Starts/stops the server when the app emits events\\n- Logs server messages to the main window\\n\\nSo in one file it handles:\\n\\n- Setting up the real-time socket server\\n- Syncing data across clients \\n- Handling all socket events from clients\\n- Starting/stopping the server\\n- Logging server messages\&quot;,\&quot;/src/renderer/router/index.js\&quot;:\&quot;This file defines the router for a Vue.js SPA application.\\n\\nKey functions:\\n\\n- Imports Vue and Vue Router \\n- Registers Vue Router\\n- Imports all component files to be used as routes\\n- Defines the routes configuration as an array of objects\\n  - Each object defines a path, name and component for a route\\n- Defines child routes under the \\\&quot;protocols\\\&quot; route\\n- Defines a wildcard redirect to the \\\&quot;main\\\&quot; route\\n\\nIn summary:\\n\\n- It sets up the router functionality for the app\\n- Maps URL paths to components \\n- Allows navigation between routes/components\\n- Handles child routes\\n- Redirects unknown paths to the main route\\n\\nSo in Vue terms, this file is responsible for routing and navigation between different views/pages in the single page application. It ties URLs to components and defines the routing configuration.\&quot;,\&quot;/.electron-vue/webpack.main.config.js\&quot;:\&quot;This file configures Webpack for building the main process code in an Electron app.\\n\\nKey things it does:\\n\\n- Sets the BABEL_ENV to \\\&quot;main\\\&quot; to tell Babel this is for the main process code\\n- Defines the entry point as the main index.js file \\n- Sets externals to exclude dependencies from the bundle\\n- Sets rules for loading JS and Node files\\n- Configures the output for the main process bundle\\n- Adds plugins like NoEmitOnErrorsPlugin\\n- Sets extensions and target as electron-main\\n- Conditionally adds DefinePlugin for dev/prod environments\\n- In production, adds minification with babel-minify-webpack-plugin\\n\\nSo in summary, it:\\n\\n1. Configures Webpack for the main process \\n2. Sets up loaders for JS and Node files\\n3. Defines the entry, output, extensions, etc\\n4. Adds plugins for errors, minification, env variables\\n5. Has different configs for dev vs prod builds\\n\\nThis allows building the optimized main process bundle for an Electron app.\&quot;,\&quot;/src/renderer/store/Classes/RaceClass.js\&quot;:\&quot;This file defines a RaceClass class that represents a race in the application.\\n\\nKey points:\\n\\n- It takes title, type, discipline and competitors as constructor parameters to initialize a new RaceClass instance.\\n\\n- The id is generated using the generateId utility function. \\n\\n- Properties like title, type, discipline and startList are set from the constructor params.\\n\\n- startList and _startList are initialized with the competitors array to track the original and current competitor lists. \\n\\n- selectedCompetitor is set to the first competitor by default.\\n\\n- del_dialog, finished and onTrack are properties to track the race state.\\n\\nKey functions:\\n\\n- The constructor initializes a new RaceClass instance.\\n\\n- No other methods are defined on the class, it simply defines the properties and structure of a race object.\\n\\nSo in summary, this class defines the data model for a race, including its properties and initial state. It doesn\\u0027t define any behavior/methods, just the data structure. Instances of this class would then be used to represent individual races in the application state.\&quot;,\&quot;/src/renderer/store/modules/aerials.js\&quot;:\&quot;This file defines a Vuex module for managing aerial codes data in the store.\\n\\nKey things it does:\\n\\n- Defines the module as namespaced, so its state, getters, mutations and actions are namespaced under the module name.\\n\\n- Defines initial state as an empty array to hold the aeCodes\\n\\n- getAeCodes getter returns the aeCodes state\\n\\n- SET_AE_CODES mutation updates the aeCodes state \\n\\n- setAeCodes action commits the SET_AE_CODES mutation to update the store with passed in codes\\n\\nSo in summary:\\n\\n- It sets up a namespaced Vuex module \\n- Defines initial state to hold aerial codes data\\n- Provides a getter to access the codes\\n- Defines a mutation to update the codes\\n- Exposes an action to commit the mutation and update codes in the store\\n\\nThis allows other components to retrieve, update and manage the aerial codes data in a centralized Vuex store.\&quot;,\&quot;/src/renderer/store/Classes/competitionLogMessageClass.js\&quot;:\&quot;This file defines a class called CompetitionLogMessageClass that represents a message object for a competition log.\\n\\nKey points:\\n\\n- It takes an args object as a parameter to its constructor, which can contain properties for the message text, type, and date.\\n\\n- It has properties for the message text (msgText), type (msgType), and date (msgDate).\\n\\n- msgDate is initialized from the passed in _msgDate property, or Date.now() if not provided. It converts it to a Date object. \\n\\n- msgType defaults to \\\&quot;info\\\&quot; if not provided.\\n\\n- It doesn\\u0027t define any methods - it\\u0027s simply a class to represent the structure of a competition log message object.\\n\\nSo in summary, this class:\\n\\n- Defines the structure of a competition log message \\n- Takes constructor arguments to initialize properties\\n- Properties include text, type, date\\n- Date is converted to Date object\\n- Default values if properties not provided\\n- No methods, just an object representation\&quot;,\&quot;/src/renderer/store/Classes/ProtocolDataFieldClass.js\&quot;:\&quot;This file defines a ProtocolDataFieldClass in JavaScript.\\n\\nKey things it does:\\n\\n- Defines a constructor that takes in args and initializes the class properties\\n- Generates a unique id for each instance\\n- Sets default values for properties like width, font size, alignment if not passed in args\\n- Initializes the cell_1 and cell_2 properties based on args, with default handlers if not passed\\n- Defines the params property schema with the expected properties for a ProtocolDataField instance\\n\\nKey functions:\\n\\n- Constructor - Initializes a new instance of the class\\n- params property - Defines the expected properties/schema for a ProtocolDataField instance\\n\\nSo in summary, it defines a class that represents a protocol data field, with properties like cells, styling etc. The constructor initializes new instances based on passed args, and the params property defines the expected structure.\&quot;,\&quot;/src/renderer/store/Classes/MarkClass.js\&quot;:\&quot;This file defines a MarkClass class that represents a single mark/score for a race by a judge.\\n\\nKey points:\\n\\n- It takes in constructor parameters like the race, judge, original value, etc and assigns them as properties.\\n\\n- It generates a unique id for each instance.\\n\\n- Properties like new_value, section, moguls_value, value_ae store the different score components.\\n\\n- moguls_value and value_ae have a default structure if not passed in.\\n\\n- No methods are defined, it\\u0027s just a class to represent the data structure of a single mark/score.\\n\\nSo in summary, this class defines the data model/structure for a single mark given by a judge for a race. It doesn\\u0027t have any functions, just properties to store the relevant data in an object. This class would then be used elsewhere when working with marks/scores data.\&quot;,\&quot;/src/renderer/store/modules/main.js\&quot;:\&quot;This file defines the main Vuex store module for the renderer process.\\n\\nKey things it does:\\n\\n- Defines the state, getters, mutations and actions for the main store\\n- Handles connecting/disconnecting the socket.io client\\n- Stores server, event and competition data\\n- Allows updating event and competition data via mutations/actions\\n- Handles loading/saving event data from/to files\\n- Exports data to CSV/XML formats\\n- Manages server status checking\\n- Provides getter functions to transform and flatten data\\n\\nKey functions:\\n\\n- connect_socket - Connects socket.io client\\n- load_event - Loads event data from file \\n- createCompetition - Adds new competition to state\\n- setCompetition - Sets active competition\\n- updateEvent - Updates event data on server\\n- serverSetStatus - Sets server status\\n- save_event - Saves event data to file\\n- exportCSV/xml_export - Export data to CSV/XML formats\\n- getters - Provide transformed/flattened data views\\n\\nSo in summary, it manages all the core application state and data, as well as connecting to the backend server via WebSockets.\&quot;,\&quot;/src/renderer/store/modules/scoring_services.js\&quot;:\&quot;This file defines a Vuex module for managing scoring services configuration in the renderer process of an Electron app.\\n\\nKey points:\\n\\n- It is namespaced as \\\&quot;scoring_services\\\&quot; to isolate its state from other modules.\\n\\n- The state contains an object called fileTranslationService that holds the path and separated flag configuration. \\n\\n- Getters expose the fileTranslationService object.\\n\\n- Mutations update the state - SET_FILE_TRANSLATION_SERVICE_PATH updates the path, SET_FILE_SEPARATION updates the separated flag.\\n\\n- Actions commit the corresponding mutations to update the state - setFileTranslationService_path and setFileSeparation.\\n\\nKey functions:\\n\\n- getFileTranslationService getter - exposes the fileTranslationService config object\\n- SET_FILE_TRANSLATION_SERVICE_PATH mutation - updates the path \\n- SET_FILE_SEPARATION mutation - updates the separated flag\\n- setFileTranslationService_path action - commits path update\\n- setFileSeparation action - commits separated flag update\\n\\nSo in summary, it defines a Vuex module to manage the scoring services configuration state in a namespaced way with getters, mutations and actions.\&quot;,\&quot;/src/renderer/store/Classes/CompetitorClass.js\&quot;:\&quot;This file defines a CompetitorClass in JavaScript.\\n\\nIt is used to represent a competitor in a race/competition.\\n\\nKey things it does:\\n\\n- Defines a constructor that takes in fields (competitor info) and marks (scores) as arguments.\\n\\n- Generates a unique id for each competitor instance. \\n\\n- Stores the competitor info and marks passed in constructor.\\n\\n- Initializes empty results and overall results arrays. \\n\\n- Defines some default properties:\\n\\n  - info_dialog - to track if info dialog is open\\n  - race_status - to track race status \\n  - res_accepted - to track if results are accepted\\n  - rank - to store rank\\n\\nKey functions:\\n\\n- Constructor - Initializes a new CompetitorClass instance\\n- info_data - Object to store competitor info fields\\n- marks - Array to store competitor scores/marks\\n- results - Array to store individual race results \\n- results_overall - Array to store overall competition results\\n\\nSo in summary, it defines a class to represent a competitor with properties and functions to manage their info, scores, results etc. within a racing/competition application.\&quot;,\&quot;/src/renderer/store/Classes/JuryClass.js\&quot;:\&quot;This file defines a JuryClass in JavaScript.\\n\\nIt is exporting a default class called JuryClass that can be imported and used in other files.\\n\\nThe key things it does:\\n\\n- Defines a constructor that accepts title, lastName, name, loc parameters. These will be properties on each JuryClass instance.\\n\\n- Sets default empty string values for properties if no parameters are passed.\\n\\n- Doesn\\u0027t define any methods - it is just defining the class/object structure for a Jury member.\\n\\nSo in summary:\\n\\n- Defines a JuryClass\\n- Exports it for use in other files \\n- Constructor sets properties from parameters\\n- No methods defined, just the class structure\\n\\nSome key functions it provides:\\n\\n- Constructor - Used to initialize JuryClass instances\\n- Properties - title, lastName, name, loc to store jury member details\\n\\nSo it is defining the class/object schema for jury members but not implementing any behavior itself. The properties provide a way to store jury member data in objects.\&quot;,\&quot;/src/renderer/store/Classes/OpenerClass.js\&quot;:\&quot;This file defines a class called OpenerClass that can be used to represent an opener object.\\n\\nKey things about this class:\\n\\n- It takes a num parameter in the constructor which is assigned to the class\\u0027 num property. If no num is passed, num is set to null.\\n\\n- It defines 4 properties that can be set on opener objects:\\n  - bib - a string\\n  - name - a string \\n  - lastName - a string\\n  - location - a string\\n\\n- It does not define any methods. This class is just used to define the structure/properties of an opener object, not functionality.\\n\\nSo in summary:\\n\\n- Defines an OpenerClass that can be used to represent opener objects\\n- Takes an optional num parameter in constructor \\n- Defines 4 properties that can store data about an opener\\n- Does not define any methods, just used for structuring opener objects\\n\\nSo the key purpose is to define the structure of opener objects that can then be instantiated and used elsewhere in the codebase.\&quot;,\&quot;/src/main/lic_server.js\&quot;:\&quot;This file is handling license key management for the app.\\n\\nKey functions:\\n\\n- app.on(\\\&quot;save_key\\\&quot;) - Event handler that saves the license key passed to it to a file located at ./lic. Handles errors from the file write.\\n\\n- app.on(\\\&quot;check_key\\\&quot;) - Event handler that reads the license key from the ./lic file. Sends a message back to the main window with either false if there is an error, or the key contents as a string if read successfully. Handles errors from the file read. \\n\\n- fs.writeFile - Writes the license key to the ./lic file \\n\\n- fs.readFile - Reads the license key from the ./lic file\\n\\n- mainWindow.webContents.send - Sends a message back to the main renderer process with the result of checking the key\\n\\nSo in summary, it provides functions to save a license key to a file and check/read that key file to verify licenses on subsequent runs of the app. The key data is communicated back to the main window via IPC messages.\&quot;,\&quot;/README.md\&quot;:\&quot;This README.md file provides documentation for building and running the tw_scoring Electron application.\\n\\nKey functions:\\n\\n- Provides build instructions for installing dependencies, running in development mode, and building for production\\n- Lists the commands to run dev (npm run dev) and build (npm run build)\\n- Mentions this project was generated using electron-vue and vue-cli, and links to their documentation\\n- Gives an overview of the original project structure generated by electron-vue\\n- Acts as documentation for setting up and using the project\\n\\nIn summary, it is a README file that explains how to build, develop, and run the Electron application. It provides important setup and usage instructions for anyone wanting to work on or use the project.\&quot;,\&quot;/src/renderer/store/modules/key.js\&quot;:\&quot;This file defines the Vuex store module for managing license/key related state and actions in the renderer process.\\n\\nKey functions:\\n\\n- get_licenses: Makes an API call to fetch all registered licenses\\n- register_key: Makes a POST request to register a new license key \\n- check_lic: Makes a POST request to validate a license key against the server\\n- state: Holds license panel visibility state and system data\\n- getters: Expose state properties as getters\\n- mutations: Mutate state (e.g. set system data)\\n- actions: Async operations like API calls that commit mutations\\n\\nIn summary, it provides a centralized place to:\\n\\n- Fetch license data from the API\\n- Register new licenses \\n- Validate license keys\\n- Manage UI state like license panel visibility\\n- Commit state mutations in response to async actions\\n\\nSo it handles all the license/key related logic and state management for the renderer process.\&quot;}&quot;}" />
  </component>
</project>